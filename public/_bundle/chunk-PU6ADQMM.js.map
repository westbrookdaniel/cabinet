{
  "version": 3,
  "sources": ["../../src/lib/traverse.ts", "../../src/lib/render.ts", "../../src/lib/utils.tsx"],
  "sourcesContent": ["import type { Node } from '@/lib/types.ts';\n\nexport function traverse<N>(\n    children: string | N | (N | string)[],\n    handlers: {\n        node?: (child: Node, i?: number) => void;\n        // TODO: Type should be Child but not Node\n        // deno-lint-ignore no-explicit-any\n        string?: (child: any, i?: number) => void;\n        // TODO: Create handlers for all the other children types?\n    },\n) {\n    if (typeof children === 'string') {\n        handlers.string?.(children);\n    } else if (Array.isArray(children)) {\n        children.flat().forEach((child, i) => {\n            // TODO: Improve checking for if it's a node\n            if (typeof child === 'object') {\n                // deno-lint-ignore no-explicit-any\n                handlers.node?.(child as any, i);\n            } else {\n                // deno-lint-ignore no-explicit-any\n                handlers.string?.(child as any, i);\n            }\n        });\n    } else {\n        // deno-lint-ignore no-explicit-any\n        handlers.node?.(children as any);\n    }\n}\n", "import type { Node } from '@/lib/types.ts';\nimport { traverse } from '@/lib/traverse.ts';\n\n/**\n * Creates dom element from a node\n */\nexport function renderNode(\n    previousEl: HTMLElement | undefined | null,\n    node: Node,\n): HTMLElement {\n    // If it's a component call it's render function\n    if (typeof node.type === 'function') {\n        return renderNode(previousEl, node.type(node.attributes));\n    }\n\n    // TODO: Add optimisation around reusing dom elements\n    const el: HTMLElement = document.createElement(node.type);\n    previousEl?.replaceChildren(el);\n\n    applyAttributes(node, el);\n\n    const children = node.attributes.children;\n    const newChildren: (HTMLElement | Text)[] = [];\n    if (children) {\n        traverse(children, {\n            node: (child, i) => {\n                newChildren.push(renderNode(previousEl?.children[i ?? 0] as HTMLElement, child));\n            },\n            string: (child) => {\n                newChildren.push(document.createTextNode(child));\n            },\n        });\n    }\n    el.replaceChildren(...newChildren);\n\n    return el;\n}\n\n/**\n * Map of elements to their event listeners\n * TODO: Add some manual cleanup for listeners when the element is removed?\n */\nconst listenersInUse = new WeakMap<HTMLElement, [string, EventListenerOrEventListenerObject][]>();\n\n/**\n * Applies attributes of a node to a dom element\n */\nfunction applyAttributes(node: Node, el: HTMLElement) {\n    // Remove old listeners\n    if (listenersInUse.has(el)) {\n        const oldListeners = listenersInUse.get(el)!;\n        oldListeners.forEach(([eventType, listener]) => {\n            el.removeEventListener(eventType, listener);\n        });\n        // Remove from listeners in use\n        listenersInUse.delete(el);\n    }\n\n    // Apply attributes\n    // Any code that modifies the dom will be run too\n    Object.entries(node.attributes).forEach(([key, value]) => {\n        if (key === 'children') return;\n        if (value === undefined) return;\n        if (key.startsWith('on') && typeof value === 'function') {\n            const eventType = key.slice(2);\n            el.addEventListener(eventType, value as EventListener);\n\n            // Add to listeners in use for cleanup next time\n            if (!listenersInUse.has(el)) {\n                listenersInUse.set(el, [[eventType, value]]);\n            } else {\n                listenersInUse.get(el)!.push([eventType, value]);\n            }\n            return;\n        }\n        el.setAttribute(key, value);\n    });\n}\n", "import { renderNode } from '@/lib/render.ts';\nimport type { BasicMeta, Node } from '@/lib/types.ts';\n\nexport const getId = () => Math.random().toString(36);\n\nexport const withFormData = <T,>(cb: (data: T, target: HTMLFormElement) => void) => (e: SubmitEvent) => {\n    e.preventDefault();\n    const el = e.target as HTMLFormElement;\n    const formData = new FormData(el);\n    const data = Object.fromEntries(formData.entries()) as T;\n    cb(data, el);\n};\n\n// deno-lint-ignore no-explicit-any\nexport function postJson(json: Record<any, any>): RequestInit {\n    return {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(json),\n    };\n}\n\nexport function setMeta(meta: Node[]) {\n    const head = document.querySelector('head');\n    console.log(head);\n    if (!head) return;\n    meta.forEach((node) => {\n        const el = renderNode(null, node);\n        const existing = el.nodeName === 'TITLE'\n            ? head.querySelector('title')\n            : head.querySelector(`meta[name=\"${el.getAttribute('name')}\"]`);\n        if (existing) {\n            existing.replaceWith(el);\n        } else {\n            head.appendChild(el);\n        }\n    });\n}\n\nsetMeta.from = (meta: BasicMeta) => {\n    const tags = [];\n    if (meta.title) {\n        tags.push(<title>{meta.title}</title>);\n    }\n    if (meta.description) {\n        tags.push(<meta name='description' content={meta.description} />);\n    }\n    if (meta.image) {\n        tags.push(<meta name='image' content={meta.image} />);\n    }\n    return setMeta(tags);\n};\n"],
  "mappings": "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",
  "names": ["traverse", "children", "handlers", "child", "i", "renderNode", "previousEl", "node", "el", "applyAttributes", "children", "newChildren", "traverse", "child", "i", "listenersInUse", "eventType", "listener", "key", "value", "getId", "withFormData", "cb", "el", "formData", "data", "postJson", "json", "setMeta", "meta", "head", "node", "renderNode", "existing", "tags", "jsx"]
}
